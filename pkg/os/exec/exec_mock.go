// Code generated by mockery. DO NOT EDIT.

package exec

import (
	"context"
	"os"

	"github.com/stretchr/testify/mock"
)

// MockExecIface is a mock of ExecIface interface.
type MockExecIface struct {
	mock.Mock
}

// Command provides a mock function with given fields: ctx, name, args
func (_m *MockExecIface) Command(ctx context.Context, name string, args ...string) CmdIface {
	mockArgs := _m.Called(ctx, name, args)
	return mockArgs.Get(0).(CmdIface)
}

// LookPath provides a mock function with given fields: file
func (_m *MockExecIface) LookPath(file string) (string, error) {
	mockArgs := _m.Called(file)
	return mockArgs.String(0), mockArgs.Error(1)
}

// MockCmdIface is a mock of CmdIface interface.
type MockCmdIface struct {
	mock.Mock
}

// WithEnv provides a mock function with given fields: env
func (_m *MockCmdIface) WithEnv(env []string) CmdIface {
	mockArgs := _m.Called(env)
	return mockArgs.Get(0).(CmdIface)
}

// WithDir provides a mock function with given fields: dir
func (_m *MockCmdIface) WithDir(dir string) CmdIface {
	mockArgs := _m.Called(dir)
	return mockArgs.Get(0).(CmdIface)
}

// WithStdout provides a mock function with given fields: stdout
func (_m *MockCmdIface) WithStdout(stdout *os.File) CmdIface {
	mockArgs := _m.Called(stdout)
	return mockArgs.Get(0).(CmdIface)
}

// WithStderr provides a mock function with given fields: stderr
func (_m *MockCmdIface) WithStderr(stderr *os.File) CmdIface {
	mockArgs := _m.Called(stderr)
	return mockArgs.Get(0).(CmdIface)
}

// Run provides a mock function with given fields:
func (_m *MockCmdIface) Run() error {
	mockArgs := _m.Called()
	return mockArgs.Error(0)
}

// Output provides a mock function with given fields:
func (_m *MockCmdIface) Output() ([]byte, error) {
	mockArgs := _m.Called()
	return mockArgs.Get(0).([]byte), mockArgs.Error(1)
}

// CombinedOutput provides a mock function with given fields:
func (_m *MockCmdIface) CombinedOutput() ([]byte, error) {
	mockArgs := _m.Called()
	return mockArgs.Get(0).([]byte), mockArgs.Error(1)
}

// NewMockExecIface creates a new instance of MockExecIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockExecIface(t mock.TestingT) *MockExecIface {
	mock := &MockExecIface{}
	mock.Test(t)
	return mock
}

// NewMockCmdIface creates a new instance of MockCmdIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCmdIface(t mock.TestingT) *MockCmdIface {
	mock := &MockCmdIface{}
	mock.Test(t)
	return mock
}
